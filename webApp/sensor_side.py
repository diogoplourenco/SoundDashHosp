import json
import time
import paho.mqtt.client as mqtt
import os

CONFIG_FILE = "./config.json"
MQTT_BROKER = "localhost"
MQTT_PORT = 1881
SUBSCRIBE_TOPIC = "sensor1/update"
PUBLISH_TOPIC = "sensor1/config"

# Fun√ß√£o para publicar configura√ß√£o atual
def publicar_configuracao(client, config):
    payload = json.dumps(config)
    client.publish(PUBLISH_TOPIC, payload=payload, retain=True)
    print(f"üì§ Configura√ß√£o publicada no t√≥pico '{PUBLISH_TOPIC}':\n{payload}")

# Callback: quando conecta
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("‚úÖ Ligado ao broker MQTT.")
        client.subscribe(SUBSCRIBE_TOPIC)
        print(f"üì° Subscrito ao t√≥pico: {SUBSCRIBE_TOPIC}")
    else:
        print(f"‚ùå Erro ao conectar. C√≥digo: {rc}")

# Callback: quando recebe mensagem
def on_message(client, userdata, msg):
    try:
        payload_str = msg.payload.decode()
        dados = json.loads(payload_str)

        print(f"\nüì• Mensagem recebida:\n{json.dumps(dados, indent=2)}")

        # Salvar novo conte√∫do no ficheiro
        with open(CONFIG_FILE, "w") as f:
            json.dump(dados, f, indent=2)
            
        if dados:
            publicar_configuracao(client, dados)
        else:
            print("‚ö†Ô∏è Dados recebidos inv√°lidos (faltam campos 'sensor' ou 'config').")

    except Exception as e:
        print(f"‚ùå Erro ao processar mensagem: {e}")

def main():
    # Verifica se ficheiro existe
    if not os.path.exists(CONFIG_FILE):
        print(f"‚ö†Ô∏è Ficheiro '{CONFIG_FILE}' n√£o encontrado.")
        return

    # L√™ configura√ß√£o inicial
    with open(CONFIG_FILE, "r") as f:
        try:
            dados = json.load(f)
        except Exception as e:
            print(f"‚ùå Erro ao ler o ficheiro: {e}")
            return

    if not dados:
        print("‚ö†Ô∏è Ficheiro inv√°lido. Campos 'sensor' e 'config' s√£o obrigat√≥rios.")
        return

    # Configura o cliente MQTT
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = on_message

    client.connect(MQTT_BROKER, MQTT_PORT, 60)

    # Publica a configura√ß√£o atual
    client.loop_start()
    time.sleep(1)  # Aguarda conex√£o antes de publicar
    publicar_configuracao(client, dados)

    # Aguarda mensagens
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nüõë Interrompido pelo utilizador.")
        client.loop_stop()
        client.disconnect()

if __name__ == "__main__":
    main()
