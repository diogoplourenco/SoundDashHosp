[
    {
        "id": "75b4fb143acc6492",
        "type": "tab",
        "label": "SoundDashHosp",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4e0fb9b112c1bd38",
        "type": "mqtt in",
        "z": "75b4fb143acc6492",
        "name": "MQTT In",
        "topic": "sound/levels",
        "qos": "2",
        "datatype": "auto",
        "broker": "edd9f4e9b1ee6c72",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 80,
        "y": 60,
        "wires": [
            [
                "9c99056efefbf566",
                "72f782a3a994047d"
            ]
        ]
    },
    {
        "id": "9c99056efefbf566",
        "type": "debug",
        "z": "75b4fb143acc6492",
        "name": "Data from Sensors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 140,
        "wires": []
    },
    {
        "id": "e249893cc4135355",
        "type": "split",
        "z": "75b4fb143acc6492",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 470,
        "y": 60,
        "wires": [
            [
                "c137155fa165c3f5"
            ]
        ]
    },
    {
        "id": "76937c3157ed0f22",
        "type": "debug",
        "z": "75b4fb143acc6492",
        "name": "Print Influx Content",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 140,
        "wires": []
    },
    {
        "id": "c137155fa165c3f5",
        "type": "function",
        "z": "75b4fb143acc6492",
        "name": "Json_to_Influx",
        "func": "var mensagem = {\n    measurement: \"Test\",//msg.payload.sensor_name,\n    payload : {\n        \"time\": Number(msg.payload[0]),\n        \"timestamp\": Number(msg.payload[0]),\n        \"LAEZ\": Number(msg.payload[1]),\n        \"Evento\": Number(msg.payload[2]),\n        \"LAEA\": Number(msg.payload[3]),\n        \"LZpeak\": Number(msg.payload[4]),\n        \"LZpeakT\": Number(msg.payload[5]),\n        \"LCpeak\": Number(msg.payload[6]),\n        \"LCpeakT\": Number(msg.payload[7]),\n        \"LApeak\": Number(msg.payload[8]),\n        \"LApeakT\": Number(msg.payload[9]),\n        \"LAFmax\": Number(msg.payload[10]),\n        \"LAFmaxT\": Number(msg.payload[11]),\n        \"LAFmin\": Number(msg.payload[12]),\n        \"LAFminT\": Number(msg.payload[13]),\n        \"LZeq\": Number(msg.payload[14]),\n        \"LCeq\": Number(msg.payload[15]),\n        \"LAeq\": Number(msg.payload[16]),\n        \"00025_Hz\": Number(msg.payload[17]),\n        \"00031.5_Hz\": Number(msg.payload[18]),\n        \"00040_Hz\": Number(msg.payload[19]),\n        \"00050_Hz\": Number(msg.payload[20]),\n        \"00063_Hz\": Number(msg.payload[21]),\n        \"00080_Hz\": Number(msg.payload[22]),\n        \"00100_Hz\": Number(msg.payload[23]),\n        \"00125_Hz\": Number(msg.payload[24]),\n        \"00160_Hz\": Number(msg.payload[25]),\n        \"00200_Hz\": Number(msg.payload[26]),\n        \"00250_Hz\": Number(msg.payload[27]),\n        \"00315_Hz\": Number(msg.payload[28]),\n        \"00400_Hz\": Number(msg.payload[29]),\n        \"00500_Hz\": Number(msg.payload[30]),\n        \"00630_Hz\": Number(msg.payload[31]),\n        \"00800_Hz\": Number(msg.payload[32]),\n        \"01000_Hz\": Number(msg.payload[33]),\n        \"01250_Hz\": Number(msg.payload[34]),\n        \"01600_Hz\": Number(msg.payload[35]),\n        \"02000_Hz\": Number(msg.payload[36]),\n        \"02500_Hz\": Number(msg.payload[37]),\n        \"03150_Hz\": Number(msg.payload[38]),\n        \"04000_Hz\": Number(msg.payload[39]),\n        \"05000_Hz\": Number(msg.payload[40]),\n        \"06300_Hz\": Number(msg.payload[41]),\n        \"08000_Hz\": Number(msg.payload[42]),\n        \"10000_Hz\": Number(msg.payload[43]),\n        \"12500_Hz\": Number(msg.payload[44]),\n        \"16000_Hz\": Number(msg.payload[45]),\n        \"20000_Hz\": Number(msg.payload[46]),\n        \"LAEA_SLOW_Event\": Number(msg.payload[47]),\n        \"EventDetect\": Number(msg.payload[48]),\n        \"EventType1\": Number(msg.payload[49]),\n        \"EventType2\": Number(msg.payload[50]),\n        \"EventType3\": Number(msg.payload[51]),\n        \"EventType4\": Number(msg.payload[52]),\n        \"EventType5\": Number(msg.payload[53]),\n        \"EventType6\": Number(msg.payload[54]),\n        \"EventType7\": Number(msg.payload[55]),\n        \"EventType8\": Number(msg.payload[56]),\n        \"EventType9\": Number(msg.payload[57]),\n        \"EventType10\": Number(msg.payload[58])\n    }\n}\n\n\nreturn mensagem;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 60,
        "wires": [
            [
                "76937c3157ed0f22",
                "4ecbb7a4ddecbfe1"
            ]
        ]
    },
    {
        "id": "72f782a3a994047d",
        "type": "function",
        "z": "75b4fb143acc6492",
        "name": "function 1",
        "func": "\n// Supondo que msg.payload contenha a string do array\ntry {\n    msg.payload = JSON.parse(msg.payload);\n} catch (e) {\n    msg.payload = {\n        error: \"Erro ao converter string para array\",\n        detalhe: e.message\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 60,
        "wires": [
            [
                "e249893cc4135355"
            ]
        ]
    },
    {
        "id": "4ecbb7a4ddecbfe1",
        "type": "influxdb out",
        "z": "75b4fb143acc6492",
        "influxdb": "312e4b825b7e13d5",
        "name": "InfluxDB",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "Sensor_Data",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ISEL",
        "bucket": "Sensor_Data",
        "x": 880,
        "y": 60,
        "wires": []
    },
    {
        "id": "d0ed4913969e1997",
        "type": "mqtt in",
        "z": "75b4fb143acc6492",
        "name": "mqtt in test",
        "topic": "csv/data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "edd9f4e9b1ee6c72",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 80,
        "y": 260,
        "wires": [
            [
                "2406da7b838e8844",
                "b1bf057fe08f4399",
                "4a48c186a1b5b216"
            ]
        ]
    },
    {
        "id": "b1bf057fe08f4399",
        "type": "debug",
        "z": "75b4fb143acc6492",
        "name": "Data from Sensors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 380,
        "wires": []
    },
    {
        "id": "2406da7b838e8844",
        "type": "function",
        "z": "75b4fb143acc6492",
        "name": "Json_to_Influx",
        "func": "var mensagem = {}\nmensagem.measurement = msg.payload.sensor_name\nmensagem.payload = {\n    \"~time\": Number(msg.payload.TimeStamp),\n    \"timestamp\": Number(msg.payload.TimeStamp), \n    \"LAEZ\": Number(msg.payload.LAEZ),\n    \"Evento\": Number(msg.payload.LAEC),\n    \"LAEA\": Number(msg.payload.LAEA),\n    \"LZpeak\": Number(msg.payload.LZpeak),\n    \"LZpeakT\": Number(msg.payload.LZpeakT),\n    \"LCpeak\": Number(msg.payload.LCpeak),\n    \"LCpeakT\": Number(msg.payload.LCpeakT),\n    \"LApeak\": Number(msg.payload.LApeak),\n    \"LApeakT\": Number(msg.payload.LApeakT),\n    \"LAFmax\": Number(msg.payload.LAFmax),\n    \"LAFmaxT\": Number(msg.payload.LAFmaxT),\n    \"LAFmin\": Number(msg.payload.LAFmin),\n    \"LAFminT\": Number(msg.payload.LAFminT),\n    \"LZeq\": Number(msg.payload.LZeq),\n    \"LCeq\": Number(msg.payload.LCeq),\n    \"LAeq\": Number(msg.payload.LAeq),\n    \"00025_Hz\": Number(msg.payload.BT25),\n    \"00031.5_Hz\": Number(msg.payload.BT31_5),\n    \"00040_Hz\": Number(msg.payload.BT40),\n    \"00050_Hz\": Number(msg.payload.BT50),\n    \"00063_Hz\": Number(msg.payload.BT63),\n    \"00080_Hz\": Number(msg.payload.BT80),\n    \"00100_Hz\": Number(msg.payload.BT100),\n    \"00125_Hz\": Number(msg.payload.BT125),\n    \"00160_Hz\": Number(msg.payload.BT160),\n    \"00200_Hz\": Number(msg.payload.BT200),\n    \"00250_Hz\": Number(msg.payload.BT250),\n    \"00315_Hz\": Number(msg.payload.BT315),\n    \"00400_Hz\": Number(msg.payload.BT400),\n    \"00500_Hz\": Number(msg.payload.BT500),\n    \"00630_Hz\": Number(msg.payload.BT630),\n    \"00800_Hz\": Number(msg.payload.BT800),\n    \"01000_Hz\": Number(msg.payload.BT1000),\n    \"01250_Hz\": Number(msg.payload.BT1250),\n    \"01600_Hz\": Number(msg.payload.BT1600),\n    \"02000_Hz\": Number(msg.payload.BT2000),\n    \"02500_Hz\": Number(msg.payload.BT2500),\n    \"03150_Hz\": Number(msg.payload.BT3150),\n    \"04000_Hz\": Number(msg.payload.BT4000),\n    \"05000_Hz\": Number(msg.payload.BT5000),\n    \"06300_Hz\": Number(msg.payload.BT6300),\n    \"08000_Hz\": Number(msg.payload.BT8000),\n    \"10000_Hz\": Number(msg.payload.BT10000),\n    \"12500_Hz\": Number(msg.payload.BT12500),\n    \"16000_Hz\": Number(msg.payload.BT16000),\n    \"20000_Hz\": Number(msg.payload.BT20000),\n    \"LAEA_SLOW_Event\" : Number(msg.payload.LAEA_SLOW_Event),\n    \"EventDetect\" : Number(msg.payload.EventDetect),\n    \"EventType1\": Number(msg.payload.EventType1),\n    \"EventType2\": Number(msg.payload.EventType2),\n    \"EventType3\": Number(msg.payload.EventType3),\n    \"EventType4\": Number(msg.payload.EventType4),\n    \"EventType5\": Number(msg.payload.EventType5),\n    \"EventType6\": Number(msg.payload.EventType6),\n    \"EventType7\": Number(msg.payload.EventType7),\n    \"EventType8\": Number(msg.payload.EventType8),\n    \"EventType9\": Number(msg.payload.EventType9),\n    \"EventType10\": Number(msg.payload.EventType10)\n}\nreturn mensagem",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 260,
        "wires": [
            [
                "44c370e493bc5a67",
                "76d7a0ea33f04daf"
            ]
        ]
    },
    {
        "id": "44c370e493bc5a67",
        "type": "debug",
        "z": "75b4fb143acc6492",
        "name": "Print Influx Content",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 380,
        "wires": []
    },
    {
        "id": "76d7a0ea33f04daf",
        "type": "influxdb out",
        "z": "75b4fb143acc6492",
        "influxdb": "312e4b825b7e13d5",
        "name": "InfluxDB",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "Sensor_Data",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ISEL",
        "bucket": "Sensor_Data",
        "x": 880,
        "y": 260,
        "wires": []
    },
    {
        "id": "4a48c186a1b5b216",
        "type": "function",
        "z": "75b4fb143acc6492",
        "name": "Json_to_Influx",
        "func": "var mensagem = {}\nmensagem.measurement = msg.payload.sensor_name\nmensagem.payload = {\n    \"timestamp\": Number(msg.payload.TimeStamp), \n    \"LAEZ\": Number(msg.payload.LAEZ),\n    \"Evento\": Number(msg.payload.LAEC),\n    \"LAEA\": Number(msg.payload.LAEA),\n    \"LZpeak\": Number(msg.payload.LZpeak),\n    \"LZpeakT\": Number(msg.payload.LZpeakT),\n    \"LCpeak\": Number(msg.payload.LCpeak),\n    \"LCpeakT\": Number(msg.payload.LCpeakT),\n    \"LApeak\": Number(msg.payload.LApeak),\n    \"LApeakT\": Number(msg.payload.LApeakT),\n    \"LAFmax\": Number(msg.payload.LAFmax),\n    \"LAFmaxT\": Number(msg.payload.LAFmaxT),\n    \"LAFmin\": Number(msg.payload.LAFmin),\n    \"LAFminT\": Number(msg.payload.LAFminT),\n    \"LZeq\": Number(msg.payload.LZeq),\n    \"LCeq\": Number(msg.payload.LCeq),\n    \"LAeq\": Number(msg.payload.LAeq),\n    \"00025_Hz\": Number(msg.payload.BT25),\n    \"00031.5_Hz\": Number(msg.payload.BT31_5),\n    \"00040_Hz\": Number(msg.payload.BT40),\n    \"00050_Hz\": Number(msg.payload.BT50),\n    \"00063_Hz\": Number(msg.payload.BT63),\n    \"00080_Hz\": Number(msg.payload.BT80),\n    \"00100_Hz\": Number(msg.payload.BT100),\n    \"00125_Hz\": Number(msg.payload.BT125),\n    \"00160_Hz\": Number(msg.payload.BT160),\n    \"00200_Hz\": Number(msg.payload.BT200),\n    \"00250_Hz\": Number(msg.payload.BT250),\n    \"00315_Hz\": Number(msg.payload.BT315),\n    \"00400_Hz\": Number(msg.payload.BT400),\n    \"00500_Hz\": Number(msg.payload.BT500),\n    \"00630_Hz\": Number(msg.payload.BT630),\n    \"00800_Hz\": Number(msg.payload.BT800),\n    \"01000_Hz\": Number(msg.payload.BT1000),\n    \"01250_Hz\": Number(msg.payload.BT1250),\n    \"01600_Hz\": Number(msg.payload.BT1600),\n    \"02000_Hz\": Number(msg.payload.BT2000),\n    \"02500_Hz\": Number(msg.payload.BT2500),\n    \"03150_Hz\": Number(msg.payload.BT3150),\n    \"04000_Hz\": Number(msg.payload.BT4000),\n    \"05000_Hz\": Number(msg.payload.BT5000),\n    \"06300_Hz\": Number(msg.payload.BT6300),\n    \"08000_Hz\": Number(msg.payload.BT8000),\n    \"10000_Hz\": Number(msg.payload.BT10000),\n    \"12500_Hz\": Number(msg.payload.BT12500),\n    \"16000_Hz\": Number(msg.payload.BT16000),\n    \"20000_Hz\": Number(msg.payload.BT20000),\n    \"LAEA_SLOW_Event\" : Number(msg.payload.LAEA_SLOW_Event),\n    \"EventDetect\" : Number(msg.payload.EventDetect),\n    \"EventType1\": Number(msg.payload.EventType1),\n    \"EventType2\": Number(msg.payload.EventType2),\n    \"EventType3\": Number(msg.payload.EventType3),\n    \"EventType4\": Number(msg.payload.EventType4),\n    \"EventType5\": Number(msg.payload.EventType5),\n    \"EventType6\": Number(msg.payload.EventType6),\n    \"EventType7\": Number(msg.payload.EventType7),\n    \"EventType8\": Number(msg.payload.EventType8),\n    \"EventType9\": Number(msg.payload.EventType9),\n    \"EventType10\": Number(msg.payload.EventType10)\n}\nreturn mensagem",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 200,
        "wires": [
            [
                "76d7a0ea33f04daf"
            ]
        ]
    },
    {
        "id": "8f5bb5421b116da9",
        "type": "inject",
        "z": "75b4fb143acc6492",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "4daba0407af38986"
            ]
        ]
    },
    {
        "id": "19178d3b92665044",
        "type": "mqtt in",
        "z": "75b4fb143acc6492",
        "name": "mqtt in test",
        "topic": "test",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "edd9f4e9b1ee6c72",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 540,
        "wires": [
            [
                "4e19c8517d512670"
            ]
        ]
    },
    {
        "id": "4daba0407af38986",
        "type": "mqtt out",
        "z": "75b4fb143acc6492",
        "name": "",
        "topic": "test",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "edd9f4e9b1ee6c72",
        "x": 350,
        "y": 600,
        "wires": []
    },
    {
        "id": "4e19c8517d512670",
        "type": "debug",
        "z": "75b4fb143acc6492",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 540,
        "wires": []
    },
    {
        "id": "edd9f4e9b1ee6c72",
        "type": "mqtt-broker",
        "name": "Official Mosquitto Local",
        "broker": "172.18.0.2",
        "port": "1881",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "312e4b825b7e13d5",
        "type": "influxdb",
        "hostname": "192.168.1.99",
        "port": 8086,
        "protocol": "http",
        "database": "Sensor_Data",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://172.18.0.1:8086",
        "timeout": 10,
        "rejectUnauthorized": false
    }
]